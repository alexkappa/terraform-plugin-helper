// Code generated by gen-accessors; DO NOT EDIT.
package expand

import "github.com/alexkappa/terraform-plugin-helper/helper"

// String accesses the value held by key and type asserts it as a string.
func String(d helper.Data, key string) (s string) {
	v, ok := get(d, key)
	if ok {
		s = v.(string)
	}
	return
}

// StringPtr accesses the value held by key and type asserts it as a pointer to
// a string.
func StringPtr(d helper.Data, key string) (s *string) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(string)
		s = &tmp
	}
	return
}

// Bool accesses the value held by key and type asserts it as a bool.
func Bool(d helper.Data, key string) (b bool) {
	v, ok := get(d, key)
	if ok {
		b = v.(bool)
	}
	return
}

// BoolPtr accesses the value held by key and type asserts it as a pointer to
// a bool.
func BoolPtr(d helper.Data, key string) (b *bool) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(bool)
		b = &tmp
	}
	return
}

// Int32 accesses the value held by key and type asserts it as a int32.
func Int32(d helper.Data, key string) (i int32) {
	v, ok := get(d, key)
	if ok {
		i = v.(int32)
	}
	return
}

// Int32Ptr accesses the value held by key and type asserts it as a pointer to
// a int32.
func Int32Ptr(d helper.Data, key string) (i *int32) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(int32)
		i = &tmp
	}
	return
}

// Uint32 accesses the value held by key and type asserts it as a uint32.
func Uint32(d helper.Data, key string) (u uint32) {
	v, ok := get(d, key)
	if ok {
		u = v.(uint32)
	}
	return
}

// Uint32Ptr accesses the value held by key and type asserts it as a pointer to
// a uint32.
func Uint32Ptr(d helper.Data, key string) (u *uint32) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(uint32)
		u = &tmp
	}
	return
}

// Int64 accesses the value held by key and type asserts it as a int64.
func Int64(d helper.Data, key string) (i int64) {
	v, ok := get(d, key)
	if ok {
		i = v.(int64)
	}
	return
}

// Int64Ptr accesses the value held by key and type asserts it as a pointer to
// a int64.
func Int64Ptr(d helper.Data, key string) (i *int64) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(int64)
		i = &tmp
	}
	return
}

// Uint64 accesses the value held by key and type asserts it as a uint64.
func Uint64(d helper.Data, key string) (u uint64) {
	v, ok := get(d, key)
	if ok {
		u = v.(uint64)
	}
	return
}

// Uint64Ptr accesses the value held by key and type asserts it as a pointer to
// a uint64.
func Uint64Ptr(d helper.Data, key string) (u *uint64) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(uint64)
		u = &tmp
	}
	return
}

// Int accesses the value held by key and type asserts it as a int.
func Int(d helper.Data, key string) (i int) {
	v, ok := get(d, key)
	if ok {
		i = v.(int)
	}
	return
}

// IntPtr accesses the value held by key and type asserts it as a pointer to
// a int.
func IntPtr(d helper.Data, key string) (i *int) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(int)
		i = &tmp
	}
	return
}

// Uint accesses the value held by key and type asserts it as a uint.
func Uint(d helper.Data, key string) (u uint) {
	v, ok := get(d, key)
	if ok {
		u = v.(uint)
	}
	return
}

// UintPtr accesses the value held by key and type asserts it as a pointer to
// a uint.
func UintPtr(d helper.Data, key string) (u *uint) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(uint)
		u = &tmp
	}
	return
}

// Float32 accesses the value held by key and type asserts it as a float32.
func Float32(d helper.Data, key string) (f float32) {
	v, ok := get(d, key)
	if ok {
		f = v.(float32)
	}
	return
}

// Float32Ptr accesses the value held by key and type asserts it as a pointer to
// a float32.
func Float32Ptr(d helper.Data, key string) (f *float32) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(float32)
		f = &tmp
	}
	return
}

// Float64 accesses the value held by key and type asserts it as a float64.
func Float64(d helper.Data, key string) (f float64) {
	v, ok := get(d, key)
	if ok {
		f = v.(float64)
	}
	return
}

// Float64Ptr accesses the value held by key and type asserts it as a pointer to
// a float64.
func Float64Ptr(d helper.Data, key string) (f *float64) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(float64)
		f = &tmp
	}
	return
}

// Complex64 accesses the value held by key and type asserts it as a complex64.
func Complex64(d helper.Data, key string) (c complex64) {
	v, ok := get(d, key)
	if ok {
		c = v.(complex64)
	}
	return
}

// Complex64Ptr accesses the value held by key and type asserts it as a pointer to
// a complex64.
func Complex64Ptr(d helper.Data, key string) (c *complex64) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(complex64)
		c = &tmp
	}
	return
}

// Complex128 accesses the value held by key and type asserts it as a complex128.
func Complex128(d helper.Data, key string) (c complex128) {
	v, ok := get(d, key)
	if ok {
		c = v.(complex128)
	}
	return
}

// Complex128Ptr accesses the value held by key and type asserts it as a pointer to
// a complex128.
func Complex128Ptr(d helper.Data, key string) (c *complex128) {
	v, ok := get(d, key)
	if ok {
		tmp := v.(complex128)
		c = &tmp
	}
	return
}
